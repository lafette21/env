#!/usr/bin/env python3

import argparse
import logging
import time

import os
import shlex
import subprocess
import shutil

from enum import Enum
from typing import List

DESCRIPTION="""
Convenience build script for improved developer workflow.

Everything beyond double dash (`--`) is forwarded as is to CMake configuring.

The script has the ability to run a given target (optionally in GDB) with
the command line given arguments.

It manages separate build directories for different build configurations.

`compile_commands.json` is automatically linked to the root of the project.
"""

EPILOG="""
Minimal example
  build -p ~/repos/nexus

Example with running tests in GDB
  build -p ~/repos/nexus -t test_nexus -s asan -r --exe-args '[units]' --gdb -- -DSUPPRESS_COMPILER_WERROR=1
"""


class AnsiColors(Enum):
    DARK_GREY = "\x1b[30;1m"
    RED       = "\x1b[31;20m"
    BOLD_RED  = "\x1b[31;1m"
    GREEN     = "\x1b[32;20m"
    YELLOW    = "\x1b[33;20m"
    BLUE      = "\x1b[34;20m"
    PURPLE    = "\x1b[35;20m"
    CYAN      = "\x1b[36;20m"
    WHITE     = "\x1b[37;1m"
    GREY      = "\x1b[38;20m"
    DEFAULT   = "\x1b[0m"


class ColorLogFormatter(logging.Formatter):
    formats = {
        logging.DEBUG:    "%(asctime)s [%(name)s] {}%(levelname)s:{} %(message)s".format(AnsiColors.BLUE.value, AnsiColors.DEFAULT.value),
        logging.INFO:     "%(asctime)s [%(name)s] {}%(levelname)s:{} %(message)s".format(AnsiColors.GREEN.value, AnsiColors.DEFAULT.value),
        logging.WARNING:  "%(asctime)s [%(name)s] {}%(levelname)s:{} %(message)s".format(AnsiColors.YELLOW.value, AnsiColors.DEFAULT.value),
        logging.ERROR:    "%(asctime)s [%(name)s] {}%(levelname)s:{} %(message)s".format(AnsiColors.RED.value, AnsiColors.DEFAULT.value),
        logging.CRITICAL: "%(asctime)s [%(name)s] {}%(levelname)s:{} %(message)s".format(AnsiColors.BOLD_RED.value, AnsiColors.DEFAULT.value)
    }

    def format(self, record):
        log_fmt = self.formats.get(record.levelno)
        formatter = logging.Formatter(log_fmt)
        return formatter.format(record)


log_handler = logging.StreamHandler()
log_handler.setFormatter(ColorLogFormatter())

logger = logging.getLogger("Builder")
logger.addHandler(log_handler)


def create_symlink(src: str, dst: str):
    """ Create symlink if it does not exist, else check if it points to a valid
    path and unlink if it is a broken link """

    if os.path.exists(dst):
        return

    if os.path.lexists(dst):
        os.unlink(dst)
    os.symlink(src, dst)


def run_command(command: str, shell=False) -> int:
    """ Run a command

    Returns with the code returned by the process.
    Raises exception if the `command` is not valid.
    """

    if command in ["", None]:
        raise Exception("Command cannot be empty or `None`")

    result = subprocess.run(shlex.split(command), shell=shell)
    return result.returncode


def configure(project: str,
              build_dir: str,
              build_type: str,
              generator: str,
              sanitizer: str,
              forward_args: List[str] =None,
              **kwargs):
    """ Configure a CMake a project

    Note: no error checking (arguments should be validate beforehand)
    """

    cmake_cmd = " ".join([
        f"cmake -S {project} -B {build_dir}",
        f"-DCMAKE_BUILD_TYPE={build_type}",
        "-DCMAKE_EXPORT_COMPILE_COMMANDS=ON",
        f"-G{generator}"
    ])

    if sanitizer != "nosan":
        cmake_cmd += f" -DSANITIZERS={sanitizer}"

    if forward_args is not None:
        cmake_cmd += f" {' '.join(forward_args)}"

    run_command(cmake_cmd)


def build(build_dir: str,
          target: str,
          jobs: int):
    """ Build a configured CMake project """

    start = time.time()
    retcode = run_command(f"cmake --build {build_dir} --target {target} -- -j{jobs}")
    logger.debug("Build took {:.3f} seconds".format(time.time() - start))
    if retcode != 0:
        raise Exception("Build failed")


def find_file(target: str, where: str) -> str:
    """ Find a file in a given path

    Raises exception if the file cannot be found.
    """

    # TODO: check for multiple finds
    for root, dir, files in os.walk(where):
        if target in files:
            return os.path.join(root, target)
    raise Exception(f"`{target}` cannot be found in `{where}`")


def run(build_dir: str, target: str, args: List[str], gdb: bool):
    """ Run the specified target with the given arguments (if any) optionally in GDB """

    if target == "all":
        raise Exception("No explicit `target` were given to `run`")

    exe = find_file(target, build_dir)

    if len(args) > 0:
        exe = " ".join([exe, " ".join(args)])

    logger.info(f"Running executable: {exe}")

    if not gdb:
        retcode = run_command(exe)
        logger.info(f"Executable returned with {retcode}")
    else:
        run_command(" ".join(["gdb", "--args", exe]))

    return


def create_build_path(project: str, build_type: str, compiler: str, sanitizer: str) -> str:
    """ Create a build path with the build dir containing the following information

    * build type in lowercase, e.g. `debug` or `release`
    * compiler name - source: CC and CXX
    * compiler version (if not the default is in use) - source: CC and CXX
    * sanitizers (if used)
    """

    if sanitizer == "nosan":
        san = ""
    else:
        san = f"-{sanitizer}"

    return os.path.join(
        os.path.realpath(project),
        "build",
        f"{build_type.lower()}-{os.path.basename(compiler)}{san}"
    )


def create_compile_cmd_symlink(src: str, dst: str):
    create_symlink(
        os.path.join(src, "compile_commands.json"),
        os.path.join(dst, "compile_commands.json")
    )


def checks():
    """ Generic sanity check(s) """
    if os.getenv("CC") == "" or os.getenv("CXX") == "":
        raise Exception("Compiler environment variables are not defined (CC and/or CXX)!")


def parse_arguments() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        prog="Build script",
        usage="build --project PATH [options]",
        description=DESCRIPTION,
        epilog=EPILOG,
        formatter_class=argparse.RawTextHelpFormatter
    )

    parser.add_argument("-p", "--project", required=True)

    parser.add_argument("-b", "--build-type", default="Debug")
    parser.add_argument("-d", "--delete", action="store_true", help="Clean build")
    parser.add_argument("-g", "--generator", default="'Unix Makefiles'", choices=["'Unix Makefiles'", "Ninja"])
    parser.add_argument("-j", "--jobs", default=1)
    parser.add_argument("-s", "--sanitizer", default="nosan", choices=["asan", "tsan"])
    parser.add_argument("-t", "--target", default="all")
    parser.add_argument("-r", "--run", action="store_true")
    parser.add_argument(      "--exe-args", nargs="+", default="", help="Forwarding arguments to the target to be run")
    parser.add_argument(      "--gdb", action="store_true", help="Run in GDB")
    parser.add_argument(      "--no-configure", action="store_true", help="Skip CMake reconfiguring")
    parser.add_argument("-v", "--verbose", action="store_true")

    subparsers = parser.add_subparsers()
    parser_fwd = subparsers.add_parser("--", prefix_chars="+", help="Forwarding arguments to CMake configuring")
    parser_fwd.add_argument("forward_args", nargs="*")

    return parser.parse_args()


def main():
    args = parse_arguments()
    checks()

    build_dir = create_build_path(args.project, args.build_type, os.getenv("CXX"), args.sanitizer)

    if args.verbose:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)

    if args.delete:
        if input(f"Are you sure to remove `{build_dir}` (press 'y' to proceed): ") == "y":
            shutil.rmtree(build_dir)

    if not args.no_configure:
        configure(build_dir=build_dir, **vars(args))
        create_compile_cmd_symlink(build_dir, args.project)

    build(build_dir, args.target, args.jobs)

    if args.run:
        run(build_dir, args.target, args.exe_args, args.gdb)


if __name__ == "__main__":
    try:
        main()
    except Exception as ex:
        logger.error(f"Exception: {ex}")
